{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"robot","version":"0.3.2","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"M_NDB2I9oztP","colab_type":"code","colab":{}},"source":["import math\n","import rospy\n","from std_msgs.msg import Float64\n","from sensor_msgs.msg import JointState\n","from simple_arm.srv import *\n","\n","def at_goal(pos_j1, goal_j1, pos_j2, goal_j2):\n","    tolerance = .05\n","    result = abs(pos_j1 - goal_j1) <= abs(tolerance)\n","    result = result and abs(pos_j2 - goal_j2) <= abs(tolerance)\n","    return result\n","\n","def clamp_at_boundaries(requested_j1, requested_j2):\n","    clamped_j1 = requested_j1\n","    clamped_j2 = requested_j2\n","\n","    min_j1 = rospy.get_param('~min_joint_1_angle', 0)\n","    max_j1 = rospy.get_param('~max_joint_1_angle', 2*math.pi)\n","    min_j2 = rospy.get_param('~min_joint_2_angle', 0)\n","    max_j2 = rospy.get_param('~max_joint_2_angle', 2*math.pi)\n","\n","    if not min_j1 <= requested_j1 <= max_j1:\n","        clamped_j1 = min(max(requested_j1, min_j1), max_j1)\n","        rospy.logwarn('j1 is out of bounds, valid range (%s,%s), clamping to: %s',\n","                      min_j1, max_j1, clamped_j1)\n","\n","    if not min_j2 <= requested_j2 <= max_j2:\n","        clamped_j2 = min(max(requested_j2, min_j2), max_j2)\n","        rospy.logwarn('j2 is out of bounds, valid range (%s,%s), clamping to: %s',\n","                      min_j2, max_j2, clamped_j2)\n","\n","    return clamped_j1, clamped_j2\n","\n","def move_arm(pos_j1, pos_j2):\n","    time_elapsed = rospy.Time.now()\n","    j1_publisher.publish(pos_j1)\n","    j2_publisher.publish(pos_j2)\n","\n","    while True:\n","        joint_state = rospy.wait_for_message('/simple_arm/joint_states', JointState)\n","        if at_goal(joint_state.position[0], pos_j1, joint_state.position[1], pos_j2):\n","            time_elapsed = joint_state.header.stamp - time_elapsed\n","            break\n","\n","    return time_elapsed\n","\n","def handle_safe_move_request(req):\n","    rospy.loginfo('GoToPositionRequest Received - j1:%s, j2:%s',\n","                   req.joint_1, req.joint_2)\n","    clamp_j1, clamp_j2 = clamp_at_boundaries(req.joint_1, req.joint_2)\n","    time_elapsed = move_arm(clamp_j1, clamp_j2)\n","\n","    return GoToPositionResponse(time_elapsed)\n","\n","def mover_service():\n","    rospy.init_node('arm_mover')\n","    service = rospy.Service('~safe_move', GoToPosition, handle_safe_move_request)\n","    rospy.spin()\n","\n","if __name__ == '__main__':\n","    j1_publisher = rospy.Publisher('/simple_arm/joint_1_position_controller/command',\n","                                   Float64, queue_size=10)\n","    j2_publisher = rospy.Publisher('/simple_arm/joint_2_position_controller/command',\n","                                   Float64, queue_size=10)\n","\n","    try:\n","        mover_service()\n","    except rospy.ROSInterruptException:\n","        pass"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"OQ0-PPNmtLNm","colab_type":"code","colab":{}},"source":["import math\n","import rospy\n","import numpy as np\n","import random\n","from std_msgs.msg import Float64, String\n","from geometry_msgs.msg import Twist\n","\n","\n","\n","class hypothesis:\n","  def __init__(self,x,y,angle):\n","      self.x=x\n","      self.y=y\n","      self.angle=0\n","      self.weight=1\n","      \n","  def gauss(self,d,dis):\n","    return 1/(math.sqrt(2*math.pi)*(d*0.05)**2)*math.exp(-(d-dis)**2/(2*(d*0.05)**2))\n","      \n","  def update_weight(self,req,dist):\n","    self.weight=1\n","    self.weight*=self.gauss(req.d1,dist[0])\n","    self.weight*=self.gauss(req.d2,dist[1])\n","    self.weight*=self.gauss(req.d3,dist[2])\n","    self.weight*=self.gauss(req.d4,dist[3])\n","      \n","  def update_h(self,st):\n","    if(st==\"f\"):\n","      if(self.angle==0):\n","        self.x-=1\n","      elif(self.angle==90):\n","        self.y+=1\n","      elif(self.angle==180):\n","        self.x+=1\n","      else:\n","        self.y-=1\n","        \n","    elif(st==\"b\"):\n","      if(self.angle==0):\n","        self.x+=1\n","      elif(self.angle==90):\n","        self.y-=1\n","      elif(self.angle==180):\n","        self.x-=1\n","      else:\n","        self.y+=1\n","        \n","    elif(st==\"r\"):\n","      self.angle+=(self.angle+90)%360\n","      if(self.angle==0):\n","        self.x-=1\n","      elif(self.angle==90):\n","        self.y+=1\n","      elif(self.angle==180):\n","        self.x+=1\n","      else:\n","        self.y-=1\n","        \n","    elif(st==\"l\"):\n","      self.angle+=(self.angle-90)%360\n","      if(self.angle==0):\n","        self.x-=1\n","      elif(self.angle==90):\n","        self.y+=1\n","      elif(self.angle==180):\n","        self.x+=1\n","      else:\n","        self.y-=1\n","        \n","   \n","    \n","class Map:\n","    def __init__(self, proxy):\n","      self.f=1\n","      self.x=49\n","      self.y=49\n","      self.mapp = np.zeros((100,100))\n","      self.mapp[:,:]=0.5\n","      self.mapp[0]=1\n","      self.mapp[-1]=1\n","      self.mapp[:,0]=1\n","      self.mapp[:,-1]=1\n","      self.hyp=[]\n","      self.proxy = proxy\n","   \n","    def d_up(x,y):\n","      b=0\n","      k=2\n","      dist_x = x-2\n","      tmp = min(abs(98-y),y)\n","      while(dist_x>0):\n","        dist_y = min(tmp,b)\n","        for j in range(y-b,y+b+1):\n","          if(self.mapp[x+k,j]==1):\n","            return math.sqrt(k**2+(j-y)**2)\n","        k+=1\n","        if(k==2):\n","          b+=1\n","        elif((k-2)%4==0):\n","          b+=1\n","        dist_x=dist_x-1\n","      return (x)*10\n","    \n","    def d_down(x,y):\n","      b=0\n","      k=2\n","      dist_x = 297-x\n","      tmp = min(abs(98-y),y)\n","      while(dist_x>0):\n","        dist_y = min(tmp,b)\n","        for j in range(y-b,y+b+1):\n","            if(self.mapp[x-k,j]==1):\n","              return math.sqrt(k**2+(j-y)**2)\n","        k+=1\n","        if(k==2):\n","          b+=1\n","        elif((k-2)%4==0):\n","          b+=1\n","        dist_x=dist_x-1\n","      return (100-x*10)\n","    \n","    \n","    def d_left(x,y):\n","      b=0\n","      k=2\n","      dist_x = y-2\n","      tmp = min(abs(98-x),x-4)\n","      while(dist_x>0):\n","        dist_y = min(tmp,b)\n","        for j in range(x-b,x+b+1):\n","          if(mapp[j,y-k]==1):\n","            return math.sqrt(k**2+(j-x)**2)\n","        k+=1\n","        if(k==2):\n","          b+=1\n","        elif((k-2)%4==0):\n","          b+=1\n","        dist_x=dist_x-1\n","      return (y-1)*10\n","    \n","    def d_right(x,y):\n","      b=0\n","      k=2\n","      dist_x = 297-y\n","      tmp = min(abs(296-x),x+4)\n","      while(dist_x>0):\n","        dist_y = min(tmp,b)\n","        for j in range(self.x-b,self.x+b+1):\n","            if(self.mapp[j,y-k]==1):\n","              return math.sqrt(k**2+(j-x)**2)\n","        k+=1\n","        if(k==2):\n","          b+=1\n","        elif((k-2)%4==0):\n","          b+=1\n","        dist_x=dist_x-1\n","      return (98-y)*10\n","      \n","    def measure(self,x,y,angle):\n","      dist = []\n","      if(angle==0):\n","        dist[0]=d_up(x,y)\n","        dist[1]=d_right(x,y)\n","        dist[2]=d_down(x,y)\n","        dist[3]=d_left(x,y)\n","      elif(angle==90):\n","        dist[0]=d_right(x,y)\n","        dist[1]=d_down(x,y)\n","        dist[2]=d_left(x,y)\n","        dist[3]=d_up(x,y)\n","      elif(angle==180):\n","        dist[0]=d_down(x,y)\n","        dist[1]=d_left(x,y)\n","        dist[2]=d_up(x,y)\n","        dist[3]=d_right(x,y)\n","      else:\n","        dist[0]=d_left(x,y)\n","        dist[1]=d_up(x,y)\n","        dist[2]=d_right(x,y)\n","        dist[3]=d_down(x,y)\n","      return dist\n","        \n","        \n","    def Up_down(self, d):\n","      b=0\n","      k=2\n","      dist_x = min(98-self.x,d/6)\n","      tmp = min(abs(298-self.y),self.y)\n","      while(dist_x>=0):\n","        dist_y = min(tmp,b)\n","        if(dist_x<0.1):\n","          for j in range(self.y-b,self.y+b+1):\n","            self.mapp[self.x-k,j]=1\n","          break\n","        else:\n","          for j in range(self.y-b,self.y+b+1):\n","            self.mapp[self.x-k,j]=0\n","        k+=1\n","        if(k==2):\n","          b+=1\n","        elif((k-2)%4==0):\n","          b+=1\n","        dist_x=dist_x-1\n","      \n","    def Up_up(self,d):\n","      b=0\n","      k=2\n","      dist_x = min(self.x-2,d/6)\n","      tmp = min(abs(98-self.y),self.y)\n","      while(dist_x>0):\n","        dist_y = min(tmp,b)\n","        if(dist_x==1):\n","          for j in range(self.y-b,self.y+b+1):\n","            self.mapp[self.x+k,j]=1\n","          break\n","        else:\n","          for j in range(self.y-b,self.y+b+1):\n","            self.mapp[self.x+k,j]=0\n","        k+=1\n","        if(k==2):\n","          b+=1\n","        elif((k-2)%4==0):\n","          b+=1\n","        dist_x=dist_x-1\n","        \n","      \n","    def Up_left(self,d):\n","      b=0\n","      k=2\n","      dist_x = min(self.y-2,d/6)\n","      tmp = min(abs(98-self.x),self.x-4)\n","      while(dist_x>0):\n","        dist_y = min(tmp,b)\n","        if(dist_x==1):\n","          for j in range(self.x-b,self.x+b+1):\n","            self.mapp[j,self.y-k]=1\n","          break\n","        else:\n","          for j in range(self.x-b,self.x+b+1):\n","            self.mapp[j,self.y-k]=0\n","        k+=1\n","        if(k==2):\n","          b+=1\n","        elif((k-2)%4==0):\n","          b+=1\n","        dist_x=dist_x-1\n","    \n","    def Up_right(self,d):\n","      b=0\n","      k=2\n","      dist_x = min(98-self.y,d)\n","      tmp = min(abs(98-self.x),self.x+4)\n","      while(dist_x>0):\n","        dist_y = min(tmp,b)\n","        if(dist_x==1):\n","          for j in range(self.x-b,self.x+b+1):\n","            self.mapp[j,self.y-k]=1\n","          break\n","        else:\n","          for j in range(self.x-b,self.x+b+1):\n","            self.mapp[j,self.y-k]=0\n","        k+=1\n","        if(k==2):\n","          b+=1\n","        elif((k-2)%4==0):\n","          b+=1\n","        dist_x=dist_x-1\n","    \n","      \n","    def choose_direction(self):\n","      return self.proxy(servicePathRequest)\n","  \n","    def update(self,req):\n","      if(req.angle==0):\n","        self.Up_up(req.d1)\n","        self.Up_right(req.d2)\n","        self.Up_down(req.d3)\n","        self.Up_left(req.d4)\n","      elif(req.angle==90):\n","        self.Up_right(req.d2)\n","        self.Up_down(req.d3)\n","        self.Up_left(req.d4)\n","        self.Up_up(req.d1)\n","      elif(req.angle==180):\n","        self.Up_down(req.d3)\n","        self.Up_left(req.d4)\n","        self.Up_up(req.d1)\n","        self.Up_right(req.d2)\n","      else:\n","        self.Up_left(req.d4)\n","        self.Up_up(req.d1)\n","        self.Up_right(req.d2)\n","        self.Up_down(req.d3)\n","      if(self.f==1):\n","        m=max(req.d1,req.d2)\n","        m=max(m,req.d3)\n","        m=max(m,req.d4)\n","        self.f=0\n","        for i in range(300):  \n","          while(True):\n","            x=random.uniform(49-m+1,49+m-1)\n","            y=random.uniform(49-m+1,49+m-1)\n","            if(self.mapp[round(x),round(y)]==0.):\n","              self.hyp.append(hypothesis(random.uniform()))\n","              break\n","      \n","      sumy=0\n","      for j in range(300):\n","        self.hyp[j].update_weight(req,self.measure(self.hyp[j].x,self.hyp[j].y,self.hyp[j].angle))\n","        sumy+=self.hyp[j].weight\n","      maxy=0\n","      for i in self.hyp:\n","        i.weight=(i.weight)/sumy\n","        if(i.weight>maxy):\n","          maxy=i.weight\n","      st=choose_direction()\n","      mas_tmp = []\n","      index = round(random.uniform(0,299))\n","      beta = 0\n","      for i in range(300):\n","        beta+=random.uniform(0,1)*2*maxy\n","        while(beta>self.mapp[index].weight):\n","          beta-=self.hyp[index].weight\n","          index = ((index+1)%1000)\n","        mas_tmp.append(self.hyp[index])\n","      self.hyp=mas_tmp  \n","      st=choose_direction()\n","      for i in range(1000):\n","        self.hyp[i].update_h(st)  \n","      return GoToPositionResponse(st)\n","    \n","  \n","def mover_service(Map):\n","    d1_publisher = rospy.Publisher('/arduino/distance_1_controller/command', Float64, queue_size=10)\n","    d2_publisher = rospy.Publisher('/arduino/distance_1_controller/command', Float64, queue_size=10)\n","    d3_publisher = rospy.Publisher('/arduino/distance_1_controller/command', Float64, queue_size=10)\n","    d4_publisher = rospy.Publisher('/arduino/distance_1_controller/command', Float64, queue_size=10)\n","    a_publisher  = rospy.Publisher('/arduino/angle_1_controller/command', Float64, queue_size=10)\n","    planner_service_proxy = rospy.ServiceProxy('/arduino/path_planner', servicePath)\n","    rospy.init_node('robot_mover')\n","    service = rospy.Service('~safe_move', GoToPosition, Map.update)\n","    rospy.spin()      \n","      \n","if __name__ == '__main__':\n","  \n","  Map m(planner_service_proxy)\n","  \n","  try:\n","        mover_service(m)\n","    except rospy.ROSInterruptException:\n","        pass"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Jrv3S5uscpng","colab_type":"code","colab":{}},"source":["#! /usr/bin/env python\n","\n","\n","import rospy\n","from sensor_msgs.msg import LaserScan\n","from geometry_msgs.msg import Twist\n","\n","import random\n","import math\n","import time\n","\n","hz = 20                     \n","loop_index = 0             \n","loop_index_outer_corner = 0\n","loop_index_inner_corner = 0 \n","inf = 5                     \n","wall_dist = 0.5            \n","max_speed = 0.3             \n","p = 15                      \n","d = 0                       \n","angle = 1                  \n","direction = -1              \n","e = 0                       \n","angle_min = 0              \n","dist_front = 0             \n","diff_e = 0                 \n","dist_min = 0               \n","last_outer_corner_detection_time = time.time()\n","last_change_direction_time = time.time()\n","last_inner_corner_detection_time = time.time()\n","rotating = 0 \n","pub_ = None\n","regions_ = {\n","        'back': 0,\n","        'right': 0,\n","        'front': 0,\n","        'left': 0,\n","}\n","last_kinds_of_wall=[0, 0, 0, 0, 0]\n","index = 0\n","\n","state_outer_inner=[0, 0, 0, 0]\n","index_state_outer_inner = 0\n","\n","bool_outer_corner = 0\n","bool_inner_corner =0\n","\n","last_vel = [random.uniform(0.1,0.3),  random.uniform(-0.3,0.3)]\n","wall_found =0 \n","state_ = 0\n","state_dict_ = {\n","    0: 'random wandering',\n","    1: 'following wall',\n","    2: 'rotating'\n","}\n","\n","def clbk_noise(msg):\n","    global regions_, e, angle_min, dist_front, diff_e, direction, bool_outer_corner, bool_inner_corner, index, last_kinds_of_wall\n","    size = len(msg.ranges)\n","    min_index = size*(direction+1)/4\n","    max_index = size*(direction+3)/4\n","    for i in range(min_index, max_index):\n","        if msg.ranges[i] < msg.ranges[min_index] and msg.ranges[i] > 0.01:\n","            min_index = i\n","    angle_min = (min_index-size/2)*msg.angle_increment\n","    dist_min = msg.ranges[min_index]\n","    dist_front = msg.ranges[size/2]\n","    diff_e = min((dist_min - wall_dist) - e, 100)\n","    e = min(dist_min - wall_dist, 100)\n","    regions_ = {\n","        'back':  min(min(msg.ranges[0:143]), inf),\n","        'right': min(min(msg.ranges[144:287]), inf),\n","        'fright':  min(min(msg.ranges[288:431]), inf),\n","        'front':  min(min(msg.ranges[432:575]), inf),\n","        'fleft':   min(min(msg.ranges[576:719]), inf),\n","        'left':   min(min(msg.ranges[720:863]), inf),\n","        'bleft':   min(min(msg.ranges[864:1007]), inf),\n","    }\n","    bool_outer_corner = is_outer_corner()\n","    bool_inner_corner = is_inner_corner()\n","    if bool_outer_corner == 0 and bool_inner_corner == 0:\n","        last_kinds_of_wall[index]=0\n","    \n","    index = index + 1 \n","    if index == len(last_kinds_of_wall):\n","        index = 0\n","        \n","    take_action()\n","\n","def change_state(state):\n","    global state_, state_dict_\n","    if state is not state_:\n","        state_ = state\n","\n","def take_action():\n","    global regions_, index, last_kinds_of_wall, index_state_outer_inner, state_outer_inner, loop_index, loop_index_outer_corner\n","    \n","    global wall_dist, max_speed, direction, p, d, angle, dist_min, wall_found, rotating, bool_outer_corner, bool_inner_corner\n","\n","    regions = regions_\n","    msg = Twist()\n","    linear_x = 0\n","    angular_z = 0\n","\n","    state_description = \n","    rotate_sequence_V1 = ['I', 'C', 'C', 'C']\n","    rotate_sequence_V2 = [0, 'C', 'C', 'C']\n","    rotate_sequence_W = ['I', 'C', 'I', 'C']\n","\n","    if rotating == 1:\n","        state_description = 'case 2 - rotating'\n","        change_state(2)\n","        if(regions['left'] < wall_dist or regions['right'] < wall_dist):\n","            rotating = 0\n","    elif regions['fright'] == inf and regions['front'] == inf and regions['right'] == inf and regions['bright'] == inf and regions['fleft'] == inf and regions['left'] == inf and regions['bleft'] == inf:\n","        state_description = 'case 0 - random wandering'\n","        change_state(0)\n","    elif (loop_index == loop_index_outer_corner) and (rotate_sequence_V1 == state_outer_inner or rotate_sequence_V2 == state_outer_inner or rotate_sequence_W == state_outer_inner):\n","        state_description = 'case 2 - rotating'\n","        change_direction()\n","        state_outer_inner = [ 0, 0,  0, 'C']\n","        change_state(2)\n","    else:\n","        state_description = 'case 1 - following wall'\n","        change_state(1)\n","\n","def random_wandering():\n","    global direction, last_vel\n","    msg = Twist()\n","    msg.linear.x = max(min( last_vel[0] + random.uniform(-0.01,0.01),0.3),0.1)\n","    msg.angular.z= max(min( last_vel[1] + random.uniform(-0.1,0.1),1),-1)\n","    if msg.angular.z == 1 or msg.angular.z == -1:\n","        msg.angular.z = 0\n","    last_vel[0] = msg.linear.x\n","    last_vel[1] = msg.angular.z\n","    return msg\n","\n","def following_wall():\n","    global wall_dist, max_speed, direction, p, d, angle, dist_min, dist_front, e, diff_e, angle_min\n","    msg = Twist()\n","    if dist_front < wall_dist:\n","        msg.linear.x = 0\n","    elif dist_front < wall_dist*2:\n","        msg.linear.x = 0.5*max_speed\n","    elif abs(angle_min) > 1.75:\n","        msg.linear.x = 0.4*max_speed\n","    else:\n","        msg.linear.x = max_speed\n","    msg.angular.z = max(min(direction*(p*e+d*diff_e) + angle*(angle_min-((math.pi)/2)*direction), 2.5), -2.5)\n","    return msg\n","\n","def change_direction():\n","    global direction, last_change_direction, rotating\n","    print 'Change direction!'\n","    elapsed_time = time.time() - last_change_direction_time \n","    if elapsed_time >= 20:\n","        last_change_direction = time.time()\n","        direction = -direction \n","        rotating = 1\n","\n","def rotating():\n","    global direction\n","    msg = Twist()\n","    msg.linear.x = 0\n","    msg.angular.z = direction*2\n","    return msg\n","\n","\n","def is_outer_corner():\n","    global regions_, last_kinds_of_wall, last_outer_corner_detection_time, index, state_outer_inner, index_state_outer_inner, loop_index, loop_index_outer_corner\n","    regions = regions_\n","    bool_outer_corner = 0\n","    if (regions['fright'] == inf and regions['front'] == inf and regions['right'] == inf and regions['bright'] < inf  and regions['left'] == inf and regions['bleft'] == inf and regions['fleft'] == inf) or (regions['bleft'] < inf and regions['fleft'] == inf and regions['front'] == inf and regions['left'] == inf and regions['right'] == inf and regions['bright'] == inf and regions['fright'] == inf):\n","        bool_outer_corner = 1 \n","        last_kinds_of_wall[index]='C'\n","        elapsed_time = time.time() - last_outer_corner_detection_time \n","        if last_kinds_of_wall.count('C') == len(last_kinds_of_wall) and elapsed_time >= 30:\n","            last_outer_corner_detection_time = time.time()\n","            loop_index_outer_corner = loop_index\n","            state_outer_inner = state_outer_inner[1:]\n","            state_outer_inner.append('C')\n","            print 'It is a outer corner'\n","    return bool_outer_corner\n","\n","def is_inner_corner():\n","    global regions_, wall_dist, last_kinds_of_wall, last_inner_corner_detection_time, index, state_outer_inner, index_state_outer_inner, loop_index_inner_corner, loop_index\n","    regions = regions_\n","    bool_inner_corner = 0\n","    if regions['fright'] < wall_dist and regions['front'] < wall_dist and regions['fleft'] < wall_dist:\n","        bool_inner_corner = 1\n","        last_kinds_of_wall[index]='I'\n","        elapsed_time = time.time() - last_inner_corner_detection_time \n","        if last_kinds_of_wall.count('I') == len(last_kinds_of_wall) and elapsed_time >= 20:\n","            last_inner_corner_detection_time = time.time()\n","            loop_index_inner_corner = loop_index\n","            state_outer_inner = state_outer_inner[1:]\n","            state_outer_inner.append('I')\n","            print 'It is a inner corner'\n","    return bool_inner_corner\n","\n","def main():\n","    global pub_, active_, hz, loop_index\n","    \n","    rospy.init_node('reading_dist')\n","    \n","    path = rospy.Service('/arduino/path_planner', servicePath, take_action)\n","      \n","    pub_ = rospy.Publisher('/cmd_vel', Twist, queue_size=1)\n","    \n","    sub = rospy.Subscriber('/m2wr/scan', LaserScan, clbk_laser)\n","    rate = rospy.Rate(hz)\n","    while not rospy.is_shutdown():\n","        loop_index = loop_index + 1\n","        msg = Twist()\n","        if state_ == 0:\n","            msg = random_wandering()\n","        elif state_ == 1:\n","            msg = following_wall()\n","        elif state_ == 2:\n","            msg = rotating()\n","        else:\n","            rospy.logerr('Unknown state!')\n","        \n","        pub_.publish(msg)\n","        \n","        rate.sleep()\n","\n","if __name__ == '__main__':\n","    main()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"uVCWAYYRtv77","colab_type":"code","colab":{}},"source":["import numpy as np\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Jz0lmhijty5A","colab_type":"code","outputId":"688c3826-b4ed-42c0-82ff-b03927fb0735","executionInfo":{"status":"ok","timestamp":1559924115807,"user_tz":-180,"elapsed":957,"user":{"displayName":"Alex Korsakov","photoUrl":"","userId":"18248625518508782982"}},"colab":{"base_uri":"https://localhost:8080/","height":187}},"source":["m=np.zeros((10,10))\n","print(m)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n"," [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n"," [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n"," [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n"," [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n"," [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n"," [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n"," [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n"," [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n"," [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"bJeJO7q4uO_v","colab_type":"code","colab":{}},"source":["m[:,:]=0.5\n","m[0]=1\n","m[:,0]=1\n","m[-1]=1\n","m[:,-1]=1\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"hCbr-vnPuU1F","colab_type":"code","outputId":"037ada32-552c-457d-f525-969895b47669","executionInfo":{"status":"ok","timestamp":1559924654849,"user_tz":-180,"elapsed":1696,"user":{"displayName":"Alex Korsakov","photoUrl":"","userId":"18248625518508782982"}},"colab":{"base_uri":"https://localhost:8080/","height":187}},"source":["print(m)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[[1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]\n"," [1.  0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 1. ]\n"," [1.  0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 1. ]\n"," [1.  0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 1. ]\n"," [1.  0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 1. ]\n"," [1.  0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 1. ]\n"," [1.  0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 1. ]\n"," [1.  0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 1. ]\n"," [1.  0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 1. ]\n"," [1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"R9837etTuWU0","colab_type":"code","outputId":"b2a4c381-e9c6-425a-e09e-550a3fcdc007","executionInfo":{"status":"ok","timestamp":1559925178668,"user_tz":-180,"elapsed":533,"user":{"displayName":"Alex Korsakov","photoUrl":"","userId":"18248625518508782982"}},"colab":{"base_uri":"https://localhost:8080/","height":187}},"source":["def kek():\n","  m=0\n","kek\n","print(m)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[[1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]\n"," [1.  0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 1. ]\n"," [1.  0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 1. ]\n"," [1.  0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 1. ]\n"," [1.  0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 1. ]\n"," [1.  0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 1. ]\n"," [1.  0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 1. ]\n"," [1.  0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 1. ]\n"," [1.  0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 1. ]\n"," [1.  1.  1.  1.  1.  1.  1.  1.  1.  1. ]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"MRVskN1ryT6V","colab_type":"code","outputId":"3df46894-11bb-479e-c89f-339d319834fd","executionInfo":{"status":"ok","timestamp":1560000031093,"user_tz":-180,"elapsed":676,"user":{"displayName":"Alex Korsakov","photoUrl":"","userId":"18248625518508782982"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["class kok:\n","  def __init__(self):\n","    self.top=0\n","    \n","    \n","kekich = kok()\n","kekich.top=1\n","print(kekich.top)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["1\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XuLk2Un-P2Ys","colab_type":"code","outputId":"200b94af-a030-471c-c84f-47218a772af5","executionInfo":{"status":"ok","timestamp":1560002476099,"user_tz":-180,"elapsed":657,"user":{"displayName":"Alex Korsakov","photoUrl":"","userId":"18248625518508782982"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["4/math.cos(15)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["-5.265320050897468"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"ltX_7JUzZLUB","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}